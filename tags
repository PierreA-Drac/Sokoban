!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	inc/structs.h	/^	ACTION_TYPE A;$/;"	m	struct:button
ACTION	inc/structs.h	/^} ACTION;$/;"	t	typeref:struct:action
ACTION_TYPE	inc/consts.h	/^} ACTION_TYPE;$/;"	t	typeref:enum:action_type
ALEA	inc/consts.h	/^	SAVE, ALEA,$/;"	e	enum:action_type
ARGS	Makefile	/^ARGS = -n 8 level\/sasquatch1.xsb$/;"	m
BOX	inc/consts.h	/^	WALL, BOX, BOX_STORAGE, CHARAC, BOX_ON_STORAGE, CHARAC_ON_STORAGE, EMPTY$/;"	e	enum:case_type
BOX_ON_STORAGE	inc/consts.h	/^	WALL, BOX, BOX_STORAGE, CHARAC, BOX_ON_STORAGE, CHARAC_ON_STORAGE, EMPTY$/;"	e	enum:case_type
BOX_STORAGE	inc/consts.h	/^	WALL, BOX, BOX_STORAGE, CHARAC, BOX_ON_STORAGE, CHARAC_ON_STORAGE, EMPTY$/;"	e	enum:case_type
BUFFER_SIZE	inc/consts.h	27;"	d
BUTTON	inc/structs.h	/^} BUTTON;$/;"	t	typeref:struct:button
But_H_Pix	inc/structs.h	/^	float But_H_Pix, But_W_Pix;$/;"	m	struct:sokoban
But_W_Pix	inc/structs.h	/^	float But_H_Pix, But_W_Pix;$/;"	m	struct:sokoban
CASE	inc/structs.h	/^} CASE;$/;"	t	typeref:struct:level_case
CASE_SIZE	inc/consts.h	22;"	d
CASE_TYPE	inc/consts.h	/^} CASE_TYPE;$/;"	t	typeref:enum:case_type
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g3 -Wall `sdl-config --cflags`$/;"	m
CHANGE_CASE	inc/consts.h	/^	CHANGE_CASE,$/;"	e	enum:action_type
CHARAC	inc/consts.h	/^	WALL, BOX, BOX_STORAGE, CHARAC, BOX_ON_STORAGE, CHARAC_ON_STORAGE, EMPTY$/;"	e	enum:case_type
CHARAC_BOTTOM	inc/consts.h	/^	CHARAC_TOP, CHARAC_BOTTOM, CHARAC_LEFT, CHARAC_RIGHT,$/;"	e	enum:action_type
CHARAC_LEFT	inc/consts.h	/^	CHARAC_TOP, CHARAC_BOTTOM, CHARAC_LEFT, CHARAC_RIGHT,$/;"	e	enum:action_type
CHARAC_ON_STORAGE	inc/consts.h	/^	WALL, BOX, BOX_STORAGE, CHARAC, BOX_ON_STORAGE, CHARAC_ON_STORAGE, EMPTY$/;"	e	enum:case_type
CHARAC_RIGHT	inc/consts.h	/^	CHARAC_TOP, CHARAC_BOTTOM, CHARAC_LEFT, CHARAC_RIGHT,$/;"	e	enum:action_type
CHARAC_TOP	inc/consts.h	/^	CHARAC_TOP, CHARAC_BOTTOM, CHARAC_LEFT, CHARAC_RIGHT,$/;"	e	enum:action_type
EDITOR	inc/consts.h	/^	PLAY, EDITOR$/;"	e	enum:mode
EMPTY	inc/consts.h	/^	WALL, BOX, BOX_STORAGE, CHARAC, BOX_ON_STORAGE, CHARAC_ON_STORAGE, EMPTY$/;"	e	enum:case_type
EXEC	Makefile	/^EXEC = sokoban$/;"	m
H_BUT_RATIO	inc/consts.h	36;"	d
H_BUT_TXT_RATIO	inc/consts.h	40;"	d
INC_PATH	Makefile	/^INC_PATH = inc\/$/;"	m
INIT	inc/consts.h	/^	INIT, QUIT,$/;"	e	enum:action_type
LDFLAGS	Makefile	/^LDFLAGS = -luvsqgraphics `sdl-config --libs` -lm -lSDL_ttf$/;"	m
LEVEL	inc/structs.h	/^} LEVEL;$/;"	t	typeref:struct:level
LEVEL_INFOS	inc/structs.h	/^} LEVEL_INFOS;$/;"	t	typeref:struct:level_infos
Lev_H_Pix	inc/structs.h	/^	int Lev_H_Pix, Lev_W_Pix;$/;"	m	struct:sokoban
Lev_W_Pix	inc/structs.h	/^	int Lev_H_Pix, Lev_W_Pix;$/;"	m	struct:sokoban
MODE	inc/consts.h	/^} MODE;$/;"	t	typeref:enum:mode
NB_BUTTON	inc/consts.h	32;"	d
NEXT	inc/consts.h	/^	PREV, NEXT,$/;"	e	enum:action_type
NONE	inc/consts.h	/^	NONE$/;"	e	enum:action_type
OBJ	Makefile	/^OBJ = $(SRC:$(SRC_PATH)%.c=$(OBJ_PATH)%.o)$/;"	m
OBJ_PATH	Makefile	/^OBJ_PATH = obj\/$/;"	m
PLAY	inc/consts.h	/^	PLAY, EDITOR$/;"	e	enum:mode
PREV	inc/consts.h	/^	PREV, NEXT,$/;"	e	enum:action_type
QUIT	inc/consts.h	/^	INIT, QUIT,$/;"	e	enum:action_type
REDO	inc/consts.h	/^	UNDO, REDO,$/;"	e	enum:action_type
SAVE	inc/consts.h	/^	SAVE, ALEA,$/;"	e	enum:action_type
SOKOBAN	inc/structs.h	/^} SOKOBAN;$/;"	t	typeref:struct:sokoban
SRC	Makefile	/^SRC = $(shell find $(SRC_PATH)*.c)$/;"	m
SRC_PATH	Makefile	/^SRC_PATH = src\/$/;"	m
UNDO	inc/consts.h	/^	UNDO, REDO,$/;"	e	enum:action_type
WALL	inc/consts.h	/^	WALL, BOX, BOX_STORAGE, CHARAC, BOX_ON_STORAGE, CHARAC_ON_STORAGE, EMPTY$/;"	e	enum:case_type
W_BUT_TXT_RATIO	inc/consts.h	41;"	d
__ACTION_H	inc/action.h	11;"	d
__CONSTS_H	inc/consts.h	11;"	d
__DISPLAY_H	inc/display.h	10;"	d
__EDITOR_H	inc/editor.h	10;"	d
__GAME_H	inc/game.h	11;"	d
__SOKOBAN_H	inc/sokoban.h	12;"	d
__STRUCTS_H	inc/structs.h	10;"	d
action	inc/structs.h	/^typedef struct action {$/;"	s
action_type	inc/consts.h	/^typedef enum action_type {$/;"	g
bl	inc/structs.h	/^	POINT tl, tr, bl, br;$/;"	m	struct:button
bl	inc/structs.h	/^	POINT tl, tr, bl, br;$/;"	m	struct:level_case
br	inc/structs.h	/^	POINT tl, tr, bl, br;$/;"	m	struct:button
br	inc/structs.h	/^	POINT tl, tr, bl, br;$/;"	m	struct:level_case
but	inc/structs.h	/^	BUTTON but[NB_BUTTON];$/;"	m	struct:sokoban
button	inc/structs.h	/^typedef struct button {$/;"	s
calcLevelSize	src/game.c	/^LEVEL calcLevelSize(FILE* F, LEVEL L) {$/;"	f
calcPosMap	src/game.c	/^void calcPosMap(CASE** map, int w, int h) {$/;"	f
case_type	inc/consts.h	/^typedef enum case_type {$/;"	g
charac	inc/structs.h	/^	POINT charac;$/;"	m	struct:level
checkArgs	src/sokoban.c	/^SOKOBAN checkArgs(int argc, char** argv) {$/;"	f
createLevel	src/game.c	/^LEVEL createLevel(FILE* F, LEVEL L) {$/;"	f
displayButtons	src/display.c	/^void displayButtons(BUTTON B[], float W, float H) {$/;"	f
displayLevel	src/display.c	/^void displayLevel(LEVEL L) {$/;"	f
displaySokoban	src/display.c	/^void displaySokoban(SOKOBAN S) {$/;"	f
editSokoban_Editor	src/editor.c	/^LEVEL editSokoban_Editor(LEVEL L, ACTION A) {$/;"	f
editSokoban_Game	src/game.c	/^LEVEL editSokoban_Game(LEVEL L, ACTION A) {$/;"	f
filename	inc/structs.h	/^	char* filename;$/;"	m	struct:level_infos
findCharac	src/game.c	/^POINT findCharac(CASE** map, int w, int h) {$/;"	f
freeMap	src/sokoban.c	/^CASE** freeMap(CASE** map, int w, int h) {$/;"	f
getArrowAction	src/action.c	/^ACTION getArrowAction(int arrow) {$/;"	f
getKeyAction	src/action.c	/^ACTION getKeyAction(char key) {$/;"	f
getMouseAction	src/action.c	/^ACTION getMouseAction(ACTION A, BUTTON B[], int ButtonHeight, int ButtonWidth) {$/;"	f
h	inc/structs.h	/^	int h, w;$/;"	m	struct:level
infos	inc/structs.h	/^	LEVEL_INFOS infos;$/;"	m	struct:level
initButtons	src/display.c	/^SOKOBAN initButtons(SOKOBAN S) {$/;"	f
initDisplay	src/display.c	/^void initDisplay(SOKOBAN S) {$/;"	f
initFirstLevel_Game	src/game.c	/^SOKOBAN initFirstLevel_Game(char** argv) {$/;"	f
initLevel	src/game.c	/^SOKOBAN initLevel(SOKOBAN S) {$/;"	f
initLevel_Editor	src/editor.c	/^SOKOBAN initLevel_Editor(char** argv) {$/;"	f
initOtherLevel_Game	src/game.c	/^SOKOBAN initOtherLevel_Game(char** argv) {$/;"	f
initSokoban_Editor	src/editor.c	/^SOKOBAN initSokoban_Editor(SOKOBAN S) {$/;"	f
initSokoban_Game	src/game.c	/^SOKOBAN initSokoban_Game(SOKOBAN S) {$/;"	f
initSpecificButton	src/display.c	/^BUTTON initSpecificButton(BUTTON B, int i, MODE M) {$/;"	f
isResolvable	src/sokoban.c	/^int isResolvable(LEVEL L) {$/;"	f
lev	inc/structs.h	/^	LEVEL lev;$/;"	m	struct:sokoban
level	inc/structs.h	/^typedef struct level {$/;"	s
level_case	inc/structs.h	/^typedef struct level_case {$/;"	s
level_infos	inc/structs.h	/^typedef struct level_infos {$/;"	s
main	src/sokoban.c	/^int main (int argc, char** argv) {$/;"	f
mallocMap	src/sokoban.c	/^CASE** mallocMap(int w, int h) {$/;"	f
map	inc/structs.h	/^	CASE** map;$/;"	m	struct:level
mode	inc/consts.h	/^typedef enum mode {$/;"	g
mode	inc/structs.h	/^	MODE mode;$/;"	m	struct:sokoban
moveCharac	src/game.c	/^LEVEL moveCharac(LEVEL L, ACTION A) {$/;"	f
name	inc/structs.h	/^	char* name;$/;"	m	struct:button
nbHit	inc/structs.h	/^	int nbHit;$/;"	m	struct:level_infos
nextLevel	src/game.c	/^SOKOBAN nextLevel(SOKOBAN S) {$/;"	f
numLevel	inc/structs.h	/^	int numLevel;$/;"	m	struct:level_infos
p	inc/structs.h	/^	POINT p;$/;"	m	struct:action
prevLevel	src/game.c	/^SOKOBAN prevLevel(SOKOBAN S) {$/;"	f
quitDisplay	src/display.c	/^void quitDisplay() {$/;"	f
readMap	src/game.c	/^CASE** readMap(FILE* F, int w, int h) {$/;"	f
setLevelPosition	src/game.c	/^int setLevelPosition(FILE* F, int numLevel) {$/;"	f
sokoban	inc/structs.h	/^typedef struct sokoban {$/;"	s
tl	inc/structs.h	/^	POINT tl, tr, bl, br;$/;"	m	struct:button
tl	inc/structs.h	/^	POINT tl, tr, bl, br;$/;"	m	struct:level_case
tr	inc/structs.h	/^	POINT tl, tr, bl, br;$/;"	m	struct:button
tr	inc/structs.h	/^	POINT tl, tr, bl, br;$/;"	m	struct:level_case
type	inc/structs.h	/^	ACTION_TYPE type;$/;"	m	struct:action
type	inc/structs.h	/^	CASE_TYPE type;$/;"	m	struct:level_case
w	inc/structs.h	/^	int h, w;$/;"	m	struct:level
waitAction	src/action.c	/^ACTION waitAction(BUTTON B[], int ButtonHeight, int ButtonWidth) {$/;"	f
wait_key_arrow_clic_v2	src/action.c	/^int wait_key_arrow_clic_v2(char *touche, int *fleche, POINT *P) { $/;"	f
whatIsCaseType	src/sokoban.c	/^CASE_TYPE whatIsCaseType(char c) {$/;"	f
win	inc/structs.h	/^	int win;$/;"	m	struct:level
